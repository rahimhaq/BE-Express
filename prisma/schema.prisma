// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/**
 * ================= Enums =================
 */

enum Role {
  USER
  ADMIN
  SUPPLIER
}

/**
 * ================ Core Models ================
 */

model Product {
  id        Int      @id @default(autoincrement())
  name      String
  price     Int
  stock     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  supplierProducts SupplierProduct[]
}

model User {
  id           Int      @id @default(autoincrement())
  email        String   @unique
  name         String
  passwordHash String // bcrypt hash
  role         Role     @default(USER) // authorization
  points       Int      @default(0)
  createdAt    DateTime @default(now())

  // password reset (encrypted token)
  resetTokenEnc String?
  resetTokenExp DateTime?

  posts             Post[]
  orders            Order[]
  sentTransfers     Transfer[]   @relation("FromUser")
  receivedTransfers Transfer[]   @relation("ToUser")
  ResetToken        ResetToken[]
}

model Post {
  id        Int       @id @default(autoincrement())
  title     String
  content   String
  category  String    @default("general")
  published Boolean   @default(false)
  authorId  Int
  author    User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  comments  Comment[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Comment {
  id        Int      @id @default(autoincrement())
  postId    Int
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  content   String
  author    String?
  createdAt DateTime @default(now())
}

model Order {
  id        Int      @id @default(autoincrement())
  userId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
}

/**
 * ============== Day 4: Transfers ==============
 */

model Transfer {
  id         Int      @id @default(autoincrement())
  fromUserId Int
  toUserId   Int
  amount     Int
  createdAt  DateTime @default(now())

  fromUser User @relation("FromUser", fields: [fromUserId], references: [id], onDelete: Cascade)
  toUser   User @relation("ToUser", fields: [toUserId], references: [id], onDelete: Cascade)
}

/**
 * =========== Day 4/5: Suppliers & Stocks ===========
 */

model Supplier {
  id           Int      @id @default(autoincrement())
  name         String   @unique
  email        String   @unique
  passwordHash String // bcrypt hash (day 5)
  taxIdEnc     String? // AES-GCM encrypted
  bankAccEnc   String? // AES-GCM encrypted
  createdAt    DateTime @default(now())

  products SupplierProduct[] // mapping stok/produk milik supplier
}

model SupplierProduct {
  id         Int      @id @default(autoincrement())
  supplierId Int
  productId  Int
  stock      Int      @default(0)
  updatedAt  DateTime @updatedAt

  supplier Supplier @relation(fields: [supplierId], references: [id], onDelete: Cascade)
  product  Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([supplierId, productId])
}

/**
 * ======== Optional: store reset token history ========
 */

model ResetToken {
  id        Int      @id @default(autoincrement())
  userId    Int
  tokenEnc  String
  expiresAt DateTime
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}
